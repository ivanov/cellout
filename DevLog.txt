This is a somewhat loose, freeform set of notes I made while working.
Occasionally I go through and cleanup these notes, since not all of them are
very useful.

2018-10-02
ideas:
[ ] look at some nbconvert stuff for functionality
[ ] executable traversal (writing back to the code cell output)
[ ] command-line spellchecking facility?
[ ] wrapped (kanten-style) notebook presentation?
[ ] interactive mode with live preview  for size and content?
[ ] metadata editor
[ ] selecting only cells matching a tag, or filtering them out
[ ] interactive cell-level editing marking/tagging
[ ] nbformat fuzzing tool?

output as ->
[x] executable script
[x] code only (filter codecell and strip output)
[x] markdown
[ ] notebook

2018-10-09
[x] current serialization doesn't match nbformat:
     Unreadable Notebook: C:\bbg\jlabremix\tmp\hi.ipynb AttributeError('cell_type',)
[ ] when you have more than one execute_count output in a code cell, which one should be shown? all?
[x] Unreadable Notebook: C:\bbg\jlabremix\tmp\hi.ipynb UnboundLocalError("local variable 'newcell' referenced before assignment",)
[ ] probably remove the nbformat major/minor from the Notebook model and
    have some mixin that does that at the end (most filters won't care about nbformat version)

from Anthony:
    multiparameter type classes --
    threadscope...
typeclasses - Show Eq -- Functor Traversable Applicative Monoid Monad
import Data.List hiding filter  -- from Anthony

[x] add command-line parsing
[ ] pandoc integration?

2018-10-12
[ ] upstream: execution_count redundancy at the cell and output level

2018-10-17
[ ] separate input and output in different lists /  storage structures
what was my thought about each cell having its own ID - oh, right, storing
all of the text up front so you can edit it that way and then rejoin/resplit
it up (but allows for saving of output)

*Main Data.Aeson.Types> :set -XOverloadedStrings
> decode "{}"  :: Maybe Value
Just (Object (fromList []))
> decode "{\"a\":1}"  :: Maybe Value
Just (Object (fromList [("a",Number 1.0)]))

2018-10-19
[x] strip output as the initial use case with IO

2018-10-22
[ ] readNotebook >>> writeNotebook >>> ( reformat using nbconvert?) >>> diff with original
    ^-- is to gauge what we're dropping on the floor right now, so we
        eventually get to dropping nothing at all
[ ] add flags for --strip-output, for example, do do noop cellout

# roundtrip gaps
[x] Execution count missing from In[ ] section
[x] output stream text missing
[x] encoding conversion for streams

2018-11-02
[x] --readonly / --read-only flags (no output - useful for )
[x] --summary (number of cells, broken down by type, how many executed)
[ ] do we need some sort of executor abstraction down the line?

2018-11-06
[ ] should we convert "source": [ "" ] to just "source": []?
[x] match up to reordered keys and whitespace for cleared output

2018-11-26
[x] rework stream
[ ] replicate newline behavior for multiple source strings?
[x] preserve notebook metadata

2018-11-27
[x] run `jq -S --indent 1` until I get the pretty printing figured out

2018-12-17
[x] better error message when failing to read notebook

 NEAT

Using bash auto-completion
Every program using optparse-applicative gets hidden arguments to support bash
auto-completion. For your own personal use, you run this or add it this to your
.bashrc:

eval "$(myprog --bash-completion-script myprog)"
To install the bash completion system-wide, put the output of
--bash-completion-script where your system looks for it. For example, on Ubuntu:

myprog --bash-completion-script myprog >/etc/bash_completion.d/myprog)

[ ] - accept multiple filenames? ?

2018-12-21
[ ] command line tag filtering
[ ] --cell-tags added to summary
[ ] --list-cell-tags?

2019-01-04
can't get alternative parsing to work... so taking a different tack:

	modifyFailure :: (String -> String) -> Parser a -> Parser a

	If the inner Parser failed, modify the failure message using the provided
	function. This allows you to create more descriptive error messages. For
	example:

	parseJSON (Object o) = modifyFailure
		("Parsing of the Foo value failed: " ++)
		(Foo <$> o .: "someField")


	parserThrowError :: JSONPath -> String -> Parser a

	Throw a parser error with an additional path.

	parserCatchError :: Parser a -> (JSONPath -> String -> Parser a) -> Parser a

	A handler function to handle previous errors and return to normal execution.


object [T.pack "worksheets" .= ([] :: [Value])]
parse nbformat3Parser it

monoidal thoughts: having the common cell content be a monoid kind of makes
sense, you can always merge multiple cells together... but what should the type
be of two cells when you merge them (if they are not the same?)

sweet, now I can <> multiple instance of CommonCellContent! woo!

although, joining Cells themselves is trickier - because you have to decide the
joining of heteregenous cell_type semantics.

2019-01-07
Questions for John:
[ ] is "LANGUAGE OverloadedStrings" ok, or is that frowned upon?

2019-01-08
- why CommonCellContent is a thing - because I wanted to be able to write code
  that did not care about cell type where that was not necessary (word count for
  example)

- why monoid? cell merging operation. Also want to be able to contactenate two
  notebooks

  Ok, sweet - now I've got `mempty :: Notebook` working, and nb1 <> nb2 just
  merges the two notebook cells, preferring the notebook metadata of nb1, but
  adding anything that wasn't in nb1 to nb2 (first write wins)

TIL :sprint in ghci will show you what's been evaluated and what hasn't

should we eliminate execution_count from Output payload? or not clear it on the
beginning of execution of the next one, and clear it at the arrival of the
previous one?

should nbformat 3 have a different notebook type or not?

ok - so I got around the worksheets list indirection for cells. How do I deal with "input" instead of "source" for code cells...

2019-01-10
 I'm procceeding in the most expedient manner for the time being, baking in
nbformat 3 parsers where the format diverges from version 4, but the right way
of doing this will be to make a separate parser for the entire format,
Notebook3, because otherwise we are subject to properly parsing a weirdo hybrid
partially v3 and partially v4 notebook.

The breadcrumbs I'm leaving myself is calling those parsing functions with an
nb3_ prefix.

[ ] was data mimebundle ever supported in pyout for nbformat3?


2019-01-24
can't make writeNb and readNb work with  (Notebook a) types, can only get code
to compile by making explicit type tied to (Notebook NbV4), for example

get variants of


* Couldn't match type `a' with `C.NbV4'
	  `a' is a rigid type variable bound by
		the type signature for:
		  withNotebook :: forall a. C.Notebook a -> Opts -> IO ()
		at app\Main.hs:88:1-45
	  Expected type: C.Notebook C.NbV4
		Actual type: C.Notebook a


2019-01-29
[ ] --append-markdown and --append-raw and --append-code that each take a
string. Same with --insert-at 4 --code-cell "print(\"hello\")" --raw-cell "yo" --markdown-cell


2019-02-13
Int vs Integer... :\
